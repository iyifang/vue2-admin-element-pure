{"remainingRequest":"D:\\Demo\\新建文件夹\\vue2-admin-element-pure\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Demo\\新建文件夹\\vue2-admin-element-pure\\src\\views\\function\\promise\\index.vue?vue&type=style&index=0&id=603f2c01&lang=scss&scoped=true&","dependencies":[{"path":"D:\\Demo\\新建文件夹\\vue2-admin-element-pure\\src\\views\\function\\promise\\index.vue","mtime":1661844422213},{"path":"D:\\Demo\\新建文件夹\\vue2-admin-element-pure\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Demo\\新建文件夹\\vue2-admin-element-pure\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"D:\\Demo\\新建文件夹\\vue2-admin-element-pure\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"D:\\Demo\\新建文件夹\\vue2-admin-element-pure\\node_modules\\sass-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Demo\\新建文件夹\\vue2-admin-element-pure\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Demo\\新建文件夹\\vue2-admin-element-pure\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoNCmEgew0KICBtYXJnaW46IDEwcHg7DQp9DQppbWcgew0KICB3aWR0aDogMTAwcHg7DQogIGhlaWdodDogMTAwcHg7DQp9DQo="},{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0IA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/views/function/promise","sourcesContent":["<template>\r\n  <div class=\"function-container\">\r\n    <el-link type=\"primary\"  @click=\"promiseFn\">基本用法</el-link>\r\n    <el-link type=\"primary\" @click=\"changeTimeout\">延迟触发</el-link>\r\n    <el-link type=\"primary\" @click=\"changeImmediately\">立即执行</el-link>\r\n    <el-link\r\n      type=\"primary\"\r\n      @click=\"\r\n        loadImageAsync(\r\n          'https://cube.elemecdn.com/6/94/4d3ea53c084bad6931a56d5158a48jpeg.jpeg'\r\n        )\r\n      \"\r\n      >异步加载图片</el-link\r\n    >\r\n    <img :src=\"image\" alt=\"img\" />\r\n    <el-link type=\"primary\" @click=\"changeCatch\">异常捕获</el-link>\r\n    <el-link type=\"primary\" @click=\"someAsyncThing\"\r\n      >异常不会退出进程、终止脚本执行</el-link\r\n    >\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      image: \"\",\r\n    };\r\n  },\r\n  methods: {\r\n    newPromise(falg) {\r\n      return new Promise((resolve, reject) => {\r\n        // 异常捕获\r\n        /* if (falg) {\r\n          resolve(\"成功\");\r\n        } else {\r\n          reject('错误信息');\r\n        } */\r\n\r\n        // 异常不会退出进程、终止脚本执行\r\n        resolve(x + 2);\r\n      });\r\n    },\r\n\r\n    // 基本用法\r\n    promiseFn() {\r\n      const promise = new Promise((resolve, reject) => {\r\n        // 请求数据\r\n        if (true) {\r\n          resolve(\"成功\");\r\n        } else {\r\n          reject(\"失败\");\r\n        }\r\n      });\r\n      promise.then(\r\n        function (val) {\r\n          console.log(val);\r\n        },\r\n        function (err) {\r\n          console.log(err);\r\n        }\r\n      );\r\n    },\r\n\r\n    // 延迟触发\r\n    timeout(ms) {\r\n      return new Promise((resolve, reject) => {\r\n        setTimeout(resolve, ms, \"done\");\r\n      });\r\n    },\r\n    changeTimeout() {\r\n      this.timeout(500)\r\n        .then((res) => {\r\n          console.log(res);\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n    },\r\n\r\n    // 立即执行顺序\r\n    changeImmediately() {\r\n      const promise = new Promise((resolve, reject) => {\r\n        console.log(\"promise\"); // 1\r\n        resolve();\r\n      });\r\n      promise.then((res) => {\r\n        console.log(\"resolve\"); // 3\r\n      });\r\n      console.log(\"666\"); // 2\r\n    },\r\n\r\n    // 异步加载图片\r\n    loadImageAsync(url) {\r\n      return new Promise((resolve, reject) => {\r\n        const image = new Image();\r\n        image.onload = function () {\r\n          resolve(image);\r\n        };\r\n        image.onerror = function () {\r\n          reject(new Error(\"Could not load image at \" + url));\r\n        };\r\n        this.image = url;\r\n      });\r\n    },\r\n\r\n    // 捕获异常\r\n    changeCatch() {\r\n      this.newPromise(false)\r\n        .then((res) => {})\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n    },\r\n\r\n    // 异常不会退出进程、终止脚本执行\r\n    // Promise 内部的错误不会影响到 Promise 外部的代码，通俗的说法就是“Promise 会吃掉错误”。\r\n    someAsyncThing() {\r\n      this.newPromise()\r\n        .then((res) => {\r\n          console.log(\"异常不会退出进程、终止脚本执行\");\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        })\r\n        .finally(() => {\r\n          console.log('必定执行');\r\n        });\r\n      setTimeout(() => {\r\n        console.log(123);\r\n      }, 2000);\r\n    },\r\n\r\n  },\r\n};\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\na {\r\n  margin: 10px;\r\n}\r\nimg {\r\n  width: 100px;\r\n  height: 100px;\r\n}\r\n</style>"]}]}